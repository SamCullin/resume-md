name: Semantic Release and Publish

on:
  push:
    branches:
      - main

# Prevent concurrent deployments to avoid conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      new_release_created: ${{ steps.release_check.outputs.new_release }}
      release_tag: ${{ steps.release_check.outputs.tag }}
      release_version: ${{ steps.release_check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up UV
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: uv sync --locked --only-dev
      
      # Store current tags before release
      - name: Get current tags
        run: git tag > before_tags.txt
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          semantic-release version
      
      # Check if a new tag was created by comparing before and after
      - name: Check for new release
        id: release_check
        run: |
          git fetch --tags
          git tag > after_tags.txt
          NEW_TAGS=$(comm -13 before_tags.txt after_tags.txt)
          if [ -n "$NEW_TAGS" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            TAG=$(echo "$NEW_TAGS" | head -n 1)
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            # Extract version without 'v' prefix if it exists
            VERSION=${TAG#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "New release detected: $TAG (version $VERSION)"
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
            echo "No new release detected"
          fi

  build:
    name: Build distribution ðŸ“¦
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_created == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.release_tag }}
      
      - name: Set up UV
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      
      - name: Install build dependencies
        run: uv sync --locked --only-dev
      
      - name: Build distributions
        run: uv build
      
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7
          if-no-files-found: error

  publish-to-pypi:
    name: Publish to PyPI
    needs: [semantic-release, build]
    if: needs.semantic-release.outputs.new_release_created == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/resume-md
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Set up UV
        id: setup-uv
        uses: astral-sh/setup-uv@v6
      
      - name: Install twine
        run: uv add twine
      
      - name: Verify distributions
        run: twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

  sign-and-upload:
    name: Sign and Upload to GitHub Release
    needs: [semantic-release, publish-to-pypi]
    if: needs.semantic-release.outputs.new_release_created == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Set up UV
        id: setup-uv
        uses: astral-sh/setup-uv@v6
      
      - name: Install sigstore
        run: uv add sigstore
      
      - name: Sign the distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      
      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.semantic-release.outputs.release_tag }}
        run: >-
          gh release upload
          "$TAG" dist/**
          --repo "$GITHUB_REPOSITORY"
          --clobber
      
      - name: Clean up artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v2
        with:
          name: python-package-distributions
          failOnError: false 